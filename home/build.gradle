import com.module.build.Alibaba
import com.module.build.BuildConfig

if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
}

android {
    compileSdk BuildConfig.compileSdk
    defaultConfig {
        if (isModule.toBoolean()) {
            applicationId "com.module.home"
        }
        minSdk BuildConfig.minSdk
        targetSdk BuildConfig.targetSdk
        versionCode BuildConfig.versionCode
        versionName BuildConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        debug {
            // minifyEnabled是否启用混淆
            minifyEnabled false
            // Zipalign优化
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            // minifyEnabled是否启用混淆
            minifyEnabled false
            // 删除无效的Resource
            shrinkResources false
            // Zipalign优化
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    resourcePrefix "home_"

    sourceSets {
        main {
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
                java {
                    //全部Module一起编译的时候剔除debug目录
                    exclude '**/**/debug/**'
                }
            }
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    api project(':commonlib')
    annotationProcessor Alibaba.arouter_compiler
}